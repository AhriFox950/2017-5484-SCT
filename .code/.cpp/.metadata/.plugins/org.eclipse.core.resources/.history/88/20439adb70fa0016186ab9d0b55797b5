#include <iostream>
#include <memory>
#include <string>

#include <Joystick.h>
#include <SampleRobot.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>
#include <RobotDrive.h>
#include <Timer.h>

/**
 * This is a demo program showing the use of the RobotDrive class.
 * The SampleRobot class is the base of a robot application that will
 * automatically call your Autonomous and OperatorControl methods at the right
 * time as controlled by the switches on the driver station or the field
 * controls.
 *
 * WARNING: While it may look like a good choice to use for your code if you're
 * inexperienced, don't. Unless you know what you are doing, complex code will
 * be much more difficult under this system. Use IterativeRobot or Command-Based
 * instead if you're new.
 */
class Robot: public frc::SampleRobot {

	// Drive Train
	int frontLeft  = 1;
	int frontRight = 3;
	int rearLeft   = 0;
	int rearRight  = 2;

	// Lift Ports
	int lift       = 4;

	// Shooter Ports
	int shooter    = 5;

	// Intake Ports
	int intake     = 8;

	// Hopper ports
	int hopper0    = 7;
	int hopper1    = 6;

	// Gear ports ( sulonoid )
	int gear       = 0;

	// Setup Drive Train
	frc::RobotDrive driveTrain { frontLeft, frontRight, rearLeft, rearRight };

	// Setup joysticks
	frc::Joystick joystick0 { 0 };
	frc::Joystick joystick1 { 1 };

	// Misc stuff
	frc::SendableChooser<std::string> chooser;
	const std::string autoNameDefault = "Default";
	const std::string autoNameCustom = "My Auto";

public:
	Robot() {
		//Note SmartDashboard is not initialized here, wait until RobotInit to make SmartDashboard calls
		driveTrain.SetExpiration(0.1);
	}

	void RobotInit() {
		chooser.AddDefault(autoNameDefault, autoNameDefault);
		chooser.AddObject(autoNameCustom, autoNameCustom);
		frc::SmartDashboard::PutData("Auto Modes", &chooser);
	}

	void Autonomous() {

	}

	void OperatorControl() override {

		// Enable saftey for the motors
		driveTrain.SetSafetyEnabled(true);

		while (IsOperatorControl() && IsEnabled()) {

			// wait for a motor update time
			frc::Wait(0.005);
		}
	}

	void Test() override {

	}
};

START_ROBOT_CLASS(Robot)
