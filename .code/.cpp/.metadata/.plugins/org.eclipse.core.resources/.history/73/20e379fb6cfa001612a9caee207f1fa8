// Included libraries
#include <iostream>
#include <memory>
#include <string>
#include <Joystick.h>
#include <SampleRobot.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>
#include <RobotDrive.h>
#include <Timer.h>

class Robot: public frc::SampleRobot
{

	// Setup the drive

	// Drive Train Ports
	int frontLeft  = 1;
	int frontRight = 3;
	int rearLeft   = 0;
	int rearRight  = 2;

	// Lift Ports
	int lift 	   = 4;

	// Shooter Ports
	int shooter    = 5;

	// Intake Ports
	int intake     = 8;

	// Hopper ports
	int hopper0    = 7;
	int hopper1    = 6;

	// Gear ports ( sulonoid )
	int gear       = 0;

	// Setup Drive Train
	frc::RobotDrive driveTrain { frontLeft, frontRight, rearLeft, rearRight };

	// Setup the joystick
	frc::Joystick joystick0 { 0 };
	frc::Joystick joystick1 { 1 };

	// Setup misc settings
	frc::SendableChooser<std::string> chooser;
	const std::string autoNameDefault = "Default";
	const std::string autoNameCustom = "My Auto";

public:
	Robot()
	{
		//Note SmartDashboard is not initialized here, wait until RobotInit to make SmartDashboard calls
		driveTrain.SetExpiration(0.1);
	}

	void RobotInit()
	{
		chooser.AddDefault(autoNameDefault, autoNameDefault);
		chooser.AddObject(autoNameCustom, autoNameCustom);
		frc::SmartDashboard::PutData("Auto Modes", &chooser);
	}

	/*
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * GetString line to get the auto name from the text box below the Gyro.
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * if-else structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	void Autonomous()
	{

	}

	/*
	 * Runs the motors with arcade steering.
	 */
	void OperatorControl() override
	{

		// Set the safety
		driveTrain.SetSafetyEnabled(true);

		// This loop runs while in teleoperated
		while (IsOperatorControl() && IsEnabled())
		{

			// Get the drive values
			double leftValue  = joystick0.m_axes<3>;
			double rightValue = joystick0.m_axes<5>;


			// Use tank drive
			driveTrain.TankDrive(leftValue, rightValue);

			// wait for a motor update time
			frc::Wait(0.005);
		}
	}

	/*
	 * Runs during test mode
	 */

	void Test() override
	{

	}
};

START_ROBOT_CLASS(Robot)
